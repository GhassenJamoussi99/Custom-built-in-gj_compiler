digraph AST {

node [shape=record]

DECL_0 [label="{DECL_x | { <type> type | <value> value | <code> code | <next> next }}"];

TYPE_1 [label="{TYPE_INTEGER| { <subtype> subtype | <params> params}}"];

DECL_0:type -> TYPE_1;

EXPR_1 [label="{EXPR_INTEGER_LITERAL | { 5 }}"];

DECL_0:value -> EXPR_1;

DECL_0:next -> DECL_2;

DECL_2 [label="{DECL_main | { <type> type | <value> value | <code> code | <next> next }}"];

TYPE_3 [label="{TYPE_FUNCTION| { <subtype> subtype | <params> params}}"];

SUBTYPE_3 [label="{TYPE_INTEGER | { <subtype> subtype | <params> params }}"];

TYPE_3:subtype -> SUBTYPE_3;

DECL_2:type -> TYPE_3;

STMT_4 [label="{STMT_IF_ELSE | { <decl> decl | <init_expr> init_expr | <expr> expr | <next_expr> next_expr | <body> body | <else_body> else_body | <next> next }}"];

EXPR_5 [label="{EXPR_BOOL_LITERAL | { false }}"];

STMT_4:expr -> EXPR_5;

STMT_6 [label="{STMT_EXPR | { <decl> decl | <init_expr> init_expr | <expr> expr | <next_expr> next_expr | <body> body | <else_body> else_body | <next> next }}"];

EXPR_7 [label="{EXPR_ASSIGN | { <left> left | <right> right }}"];

EXPR_8 [label="{EXPR_NAME | { x }}"];

EXPR_7:left -> EXPR_8;

EXPR_9 [label="{EXPR_INTEGER_LITERAL | { 15 }}"];

EXPR_7:right -> EXPR_9;

STMT_6:expr -> EXPR_7;

STMT_4:body -> STMT_6;

STMT_10 [label="{STMT_EXPR | { <decl> decl | <init_expr> init_expr | <expr> expr | <next_expr> next_expr | <body> body | <else_body> else_body | <next> next }}"];

EXPR_11 [label="{EXPR_ASSIGN | { <left> left | <right> right }}"];

EXPR_12 [label="{EXPR_NAME | { x }}"];

EXPR_11:left -> EXPR_12;

EXPR_13 [label="{EXPR_INTEGER_LITERAL | { 10 }}"];

EXPR_11:right -> EXPR_13;

STMT_10:expr -> EXPR_11;

STMT_4:else_body -> STMT_10;

STMT_14 [label="{STMT_IF_ELSE | { <decl> decl | <init_expr> init_expr | <expr> expr | <next_expr> next_expr | <body> body | <else_body> else_body | <next> next }}"];

EXPR_15 [label="{EXPR_BOOL_LITERAL | { true }}"];

STMT_14:expr -> EXPR_15;

STMT_16 [label="{STMT_BLOCK | { <decl> decl | <init_expr> init_expr | <expr> expr | <next_expr> next_expr | <body> body | <else_body> else_body | <next> next }}"];

STMT_17 [label="{STMT_RETURN | { <decl> decl | <init_expr> init_expr | <expr> expr | <next_expr> next_expr | <body> body | <else_body> else_body | <next> next }}"];

EXPR_18 [label="{EXPR_NAME | { x }}"];

STMT_17:expr -> EXPR_18;

STMT_16:body -> STMT_17;

STMT_14:body -> STMT_16;

STMT_19 [label="{STMT_BLOCK | { <decl> decl | <init_expr> init_expr | <expr> expr | <next_expr> next_expr | <body> body | <else_body> else_body | <next> next }}"];

STMT_20 [label="{STMT_RETURN | { <decl> decl | <init_expr> init_expr | <expr> expr | <next_expr> next_expr | <body> body | <else_body> else_body | <next> next }}"];

EXPR_21 [label="{EXPR_INTEGER_LITERAL | { 1 }}"];

STMT_20:expr -> EXPR_21;

STMT_19:body -> STMT_20;

STMT_14:else_body -> STMT_19;

STMT_4:next -> STMT_14;

DECL_2:code -> STMT_4;

}

