2024-07-10.12:53:16 [INFO] Starting compiler...
2024-07-10.12:53:16 [INFO] Entering new scope.
2024-07-10.12:53:16 [INFO] Resolving declaration: x
2024-07-10.12:53:16 [INFO] Creating symbol: x of kind: SYMBOL_GLOBAL
2024-07-10.12:53:16 [INFO] expr::expr_resolve
2024-07-10.12:53:16 [INFO] Binding symbol: x to current scope level: 1 with offset: 0
2024-07-10.12:53:16 [INFO] Resolving declaration: main
2024-07-10.12:53:16 [INFO] Creating symbol: main of kind: SYMBOL_GLOBAL
2024-07-10.12:53:16 [INFO] expr::expr_resolve
2024-07-10.12:53:16 [INFO] Binding symbol: main to current scope level: 1 with offset: 0
2024-07-10.12:53:16 [INFO] Entering new scope.
2024-07-10.12:53:16 [INFO] stmt_resolve::
2024-07-10.12:53:16 [INFO] stmt_resolve::Resolving for loop statement
2024-07-10.12:53:16 [DEBUG] stmt_resolve::Resolving init expression of for loop
2024-07-10.12:53:16 [INFO] expr::expr_resolve
2024-07-10.12:53:16 [INFO] Resolving left expression of kind: EXPR_ASSIGN
2024-07-10.12:53:16 [INFO] expr::expr_resolve
2024-07-10.12:53:16 [INFO] Symbol: x found in scope level: 0
2024-07-10.12:53:16 [INFO] Resolving right expression of kind: EXPR_ASSIGN
2024-07-10.12:53:16 [INFO] expr::expr_resolve
2024-07-10.12:53:16 [DEBUG] stmt_resolve::Resolving condition expression of for loop
2024-07-10.12:53:16 [INFO] expr::expr_resolve
2024-07-10.12:53:16 [INFO] Resolving left expression of kind: EXPR_LT
2024-07-10.12:53:16 [INFO] expr::expr_resolve
2024-07-10.12:53:16 [INFO] Symbol: x found in scope level: 0
2024-07-10.12:53:16 [INFO] Resolving right expression of kind: EXPR_LT
2024-07-10.12:53:16 [INFO] expr::expr_resolve
2024-07-10.12:53:16 [DEBUG] stmt_resolve::Resolving next expression of for loop
2024-07-10.12:53:16 [INFO] expr::expr_resolve
2024-07-10.12:53:16 [INFO] Resolving left expression of kind: EXPR_ASSIGN
2024-07-10.12:53:16 [INFO] expr::expr_resolve
2024-07-10.12:53:16 [INFO] Symbol: x found in scope level: 0
2024-07-10.12:53:16 [INFO] Resolving right expression of kind: EXPR_ASSIGN
2024-07-10.12:53:16 [INFO] expr::expr_resolve
2024-07-10.12:53:16 [INFO] Resolving left expression of kind: EXPR_ADD
2024-07-10.12:53:16 [INFO] expr::expr_resolve
2024-07-10.12:53:16 [INFO] Symbol: x found in scope level: 0
2024-07-10.12:53:16 [INFO] Resolving right expression of kind: EXPR_ADD
2024-07-10.12:53:16 [INFO] expr::expr_resolve
2024-07-10.12:53:16 [DEBUG] stmt_resolve::Resolving body of for loop
2024-07-10.12:53:16 [INFO] stmt_resolve::
2024-07-10.12:53:16 [INFO] stmt_resolve::Resolving block statement
2024-07-10.12:53:16 [INFO] stmt_resolve::
2024-07-10.12:53:16 [INFO] stmt_resolve::Resolving print statement
2024-07-10.12:53:16 [INFO] expr::expr_resolve
2024-07-10.12:53:16 [INFO] Resolving left expression of kind: EXPR_ARG
2024-07-10.12:53:16 [INFO] expr::expr_resolve
2024-07-10.12:53:16 [INFO] Symbol: x found in scope level: 0
2024-07-10.12:53:16 [INFO] stmt_resolve::Resolving next statement in the list
2024-07-10.12:53:16 [INFO] stmt_resolve::
2024-07-10.12:53:16 [INFO] stmt_resolve::Resolving return statement
2024-07-10.12:53:16 [INFO] expr::expr_resolve
2024-07-10.12:53:16 [INFO] Number of local variables 0
2024-07-10.12:53:16 [INFO] Exiting scope, current level: 2
2024-07-10.12:53:16 [INFO] decl::decl_typecheck
2024-07-10.12:53:16 [DEBUG] expr::expr_typecheck
2024-07-10.12:53:16 [DEBUG] expr_typecheck::EXPR_INTEGER_LITERAL
2024-07-10.12:53:16 [INFO] decl::decl_typecheck
2024-07-10.12:53:16 [INFO] stmt_typecheck::STMT_FOR
2024-07-10.12:53:16 [DEBUG] expr::expr_typecheck
2024-07-10.12:53:16 [DEBUG] expr_typecheck: Checking left expression
2024-07-10.12:53:16 [DEBUG] expr::expr_typecheck
2024-07-10.12:53:16 [DEBUG] expr_typecheck::EXPR_NAME
2024-07-10.12:53:16 [DEBUG] expr_typecheck: Checking right expression
2024-07-10.12:53:16 [DEBUG] expr::expr_typecheck
2024-07-10.12:53:16 [DEBUG] expr_typecheck::EXPR_INTEGER_LITERAL
2024-07-10.12:53:16 [DEBUG] expr_typecheck::EXPR_ASSIGN
2024-07-10.12:53:16 [DEBUG] expr::expr_typecheck
2024-07-10.12:53:16 [DEBUG] expr_typecheck: Checking left expression
2024-07-10.12:53:16 [DEBUG] expr::expr_typecheck
2024-07-10.12:53:16 [DEBUG] expr_typecheck::EXPR_NAME
2024-07-10.12:53:16 [DEBUG] expr_typecheck: Checking right expression
2024-07-10.12:53:16 [DEBUG] expr::expr_typecheck
2024-07-10.12:53:16 [DEBUG] expr_typecheck::EXPR_INTEGER_LITERAL
2024-07-10.12:53:16 [DEBUG] expr_typecheck::Comparison EXPR_LT
2024-07-10.12:53:16 [DEBUG] expr::expr_typecheck
2024-07-10.12:53:16 [DEBUG] expr_typecheck: Checking left expression
2024-07-10.12:53:16 [DEBUG] expr::expr_typecheck
2024-07-10.12:53:16 [DEBUG] expr_typecheck::EXPR_NAME
2024-07-10.12:53:16 [DEBUG] expr_typecheck: Checking right expression
2024-07-10.12:53:16 [DEBUG] expr::expr_typecheck
2024-07-10.12:53:16 [DEBUG] expr_typecheck: Checking left expression
2024-07-10.12:53:16 [DEBUG] expr::expr_typecheck
2024-07-10.12:53:16 [DEBUG] expr_typecheck::EXPR_NAME
2024-07-10.12:53:16 [DEBUG] expr_typecheck: Checking right expression
2024-07-10.12:53:16 [DEBUG] expr::expr_typecheck
2024-07-10.12:53:16 [DEBUG] expr_typecheck::EXPR_INTEGER_LITERAL
2024-07-10.12:53:16 [DEBUG] expr_typecheck::EXPR_ADD
2024-07-10.12:53:16 [DEBUG] expr_typecheck::EXPR_ASSIGN
2024-07-10.12:53:16 [INFO] stmt_typecheck::STMT_BLOCK
2024-07-10.12:53:16 [INFO] stmt_typecheck::STMT_PRINT
2024-07-10.12:53:16 [DEBUG] Folding declaration expressions: x
2024-07-10.12:53:16 [DEBUG] Folding node of kind: EXPR_INTEGER_LITERAL
2024-07-10.12:53:16 [DEBUG] Left child of node kind: EXPR_INTEGER_LITERAL is null.
2024-07-10.12:53:16 [DEBUG] Right child of node kind: EXPR_INTEGER_LITERAL is null.
2024-07-10.12:53:16 [DEBUG] Folding declaration statements for: main
2024-07-10.12:53:16 [DEBUG] Folding statement of kind: STMT_FOR
2024-07-10.12:53:16 [DEBUG] Folding for-loop init expression.
2024-07-10.12:53:16 [DEBUG] Folding node of kind: EXPR_ASSIGN
2024-07-10.12:53:16 [DEBUG] Folding left child of node kind: EXPR_ASSIGN with value: 0 with name: 
2024-07-10.12:53:16 [DEBUG] Folding node of kind: EXPR_NAME
2024-07-10.12:53:16 [DEBUG] Left child of node kind: EXPR_NAME is null.
2024-07-10.12:53:16 [DEBUG] Right child of node kind: EXPR_NAME is null.
2024-07-10.12:53:16 [DEBUG] Folding right child of node kind: EXPR_ASSIGN with value: 0
2024-07-10.12:53:16 [DEBUG] Folding node of kind: EXPR_INTEGER_LITERAL
2024-07-10.12:53:16 [DEBUG] Left child of node kind: EXPR_INTEGER_LITERAL is null.
2024-07-10.12:53:16 [DEBUG] Right child of node kind: EXPR_INTEGER_LITERAL is null.
2024-07-10.12:53:16 [DEBUG] Folding for-loop condition.
2024-07-10.12:53:16 [DEBUG] Folding node of kind: EXPR_LT
2024-07-10.12:53:16 [DEBUG] Folding left child of node kind: EXPR_LT with value: 0 with name: 
2024-07-10.12:53:16 [DEBUG] Folding node of kind: EXPR_NAME
2024-07-10.12:53:16 [DEBUG] Left child of node kind: EXPR_NAME is null.
2024-07-10.12:53:16 [DEBUG] Right child of node kind: EXPR_NAME is null.
2024-07-10.12:53:16 [DEBUG] Folding right child of node kind: EXPR_LT with value: 0
2024-07-10.12:53:16 [DEBUG] Folding node of kind: EXPR_INTEGER_LITERAL
2024-07-10.12:53:16 [DEBUG] Left child of node kind: EXPR_INTEGER_LITERAL is null.
2024-07-10.12:53:16 [DEBUG] Right child of node kind: EXPR_INTEGER_LITERAL is null.
2024-07-10.12:53:16 [DEBUG] Folding for-loop next expression.
2024-07-10.12:53:16 [DEBUG] Folding node of kind: EXPR_ASSIGN
2024-07-10.12:53:16 [DEBUG] Folding left child of node kind: EXPR_ASSIGN with value: 0 with name: 
2024-07-10.12:53:16 [DEBUG] Folding node of kind: EXPR_NAME
2024-07-10.12:53:16 [DEBUG] Left child of node kind: EXPR_NAME is null.
2024-07-10.12:53:16 [DEBUG] Right child of node kind: EXPR_NAME is null.
2024-07-10.12:53:16 [DEBUG] Folding right child of node kind: EXPR_ASSIGN with value: 0
2024-07-10.12:53:16 [DEBUG] Folding node of kind: EXPR_ADD
2024-07-10.12:53:16 [DEBUG] Folding left child of node kind: EXPR_ADD with value: 0 with name: 
2024-07-10.12:53:16 [DEBUG] Folding node of kind: EXPR_NAME
2024-07-10.12:53:16 [DEBUG] Left child of node kind: EXPR_NAME is null.
2024-07-10.12:53:16 [DEBUG] Right child of node kind: EXPR_NAME is null.
2024-07-10.12:53:16 [DEBUG] Folding right child of node kind: EXPR_ADD with value: 0
2024-07-10.12:53:16 [DEBUG] Folding node of kind: EXPR_INTEGER_LITERAL
2024-07-10.12:53:16 [DEBUG] Left child of node kind: EXPR_INTEGER_LITERAL is null.
2024-07-10.12:53:16 [DEBUG] Right child of node kind: EXPR_INTEGER_LITERAL is null.
2024-07-10.12:53:16 [DEBUG] Folding for-loop body.
2024-07-10.12:53:16 [DEBUG] Folding statement of kind: STMT_BLOCK
2024-07-10.12:53:16 [DEBUG] Folding block statement.
2024-07-10.12:53:16 [DEBUG] Folding statement of kind: STMT_PRINT
2024-07-10.12:53:16 [DEBUG] Folding print/return statement.
2024-07-10.12:53:16 [DEBUG] Folding node of kind: EXPR_ARG
2024-07-10.12:53:16 [DEBUG] Folding left child of node kind: EXPR_ARG with value: 0 with name: 
2024-07-10.12:53:16 [DEBUG] Folding node of kind: EXPR_NAME
2024-07-10.12:53:16 [DEBUG] Left child of node kind: EXPR_NAME is null.
2024-07-10.12:53:16 [DEBUG] Right child of node kind: EXPR_NAME is null.
2024-07-10.12:53:16 [DEBUG] Right child of node kind: EXPR_ARG is null.
2024-07-10.12:53:16 [DEBUG] Folding next statement.
2024-07-10.12:53:16 [DEBUG] Folding statement of kind: STMT_RETURN
2024-07-10.12:53:16 [DEBUG] Folding print/return statement.
2024-07-10.12:53:16 [DEBUG] Folding node of kind: EXPR_INTEGER_LITERAL
2024-07-10.12:53:16 [DEBUG] Left child of node kind: EXPR_INTEGER_LITERAL is null.
2024-07-10.12:53:16 [DEBUG] Right child of node kind: EXPR_INTEGER_LITERAL is null.
2024-07-10.12:53:16 [DEBUG] Declaration main has a null expression.
2024-07-10.12:53:16 [DEBUG] stmt_codegen::Generating code for STMT_FOR
2024-07-10.12:53:16 [INFO] expr_codegen::EXPR_ASSIGN
2024-07-10.12:53:16 [INFO] expr_codegen::EXPR_INTEGER_LITERAL
2024-07-10.12:53:16 [INFO] expr_codegen::Comparison
2024-07-10.12:53:16 [INFO] expr_codegen::EXPR_NAME
2024-07-10.12:53:16 [INFO] expr_codegen::e->symbol->kind = TYPE_INTEGER
2024-07-10.12:53:16 [INFO] expr_codegen::EXPR_INTEGER_LITERAL
2024-07-10.12:53:16 [DEBUG] stmt_codegen::Generating code for STMT_BLOCK
2024-07-10.12:53:16 [DEBUG] stmt_codegen::Generating code for STMT_PRINT
2024-07-10.12:53:16 [DEBUG] stmt_codegen::Initializing argument parsing.
2024-07-10.12:53:16 [DEBUG] stmt_codegen::Parsing argument of type: 0x564d352b7250
2024-07-10.12:53:16 [DEBUG] stmt_codegen::Added format specifier %d.
2024-07-10.12:53:16 [DEBUG] stmt_codegen::Argument count incremented to: 1
2024-07-10.12:53:16 [DEBUG] stmt_codegen::Total arguments processed: 1
2024-07-10.12:53:16 [DEBUG] stmt_codegen::Generated label for format string: L2
2024-07-10.12:53:16 [DEBUG] stmt_codegen::Format string emitted to data section: %d
2024-07-10.12:53:16 [DEBUG] stmt_codegen::Loaded format string address into rdi
2024-07-10.12:53:16 [INFO] expr_codegen::EXPR_NAME
2024-07-10.12:53:16 [INFO] expr_codegen::e->symbol->kind = TYPE_INTEGER
2024-07-10.12:53:16 [DEBUG] stmt_codegen::Starting code generation for arguments.
2024-07-10.12:53:16 [DEBUG] stmt_codegen::Generated code for argument: x
2024-07-10.12:53:16 [DEBUG] stmt_codegen::Moved argument to register: rsi
2024-07-10.12:53:16 [DEBUG] stmt_codegen::Emitted call to printf.
2024-07-10.12:53:16 [INFO] expr_codegen::EXPR_ASSIGN
2024-07-10.12:53:16 [INFO] expr_codegen::EXPR_ADD
2024-07-10.12:53:16 [INFO] expr_codegen::EXPR_NAME
2024-07-10.12:53:16 [INFO] expr_codegen::e->symbol->kind = TYPE_INTEGER
2024-07-10.12:53:16 [INFO] expr_codegen::EXPR_INTEGER_LITERAL
2024-07-10.12:53:16 [DEBUG] stmt_codegen::Generating code for STMT_RETURN
2024-07-10.12:53:16 [INFO] expr_codegen::EXPR_INTEGER_LITERAL
2024-07-10.12:53:16 [INFO] Exiting scope, current level: 1
